version: '3.9'
services:

  starter:
    container_name: starter
    environment:
      - "POSTGRES_USER=${POSTGRES_HOST:-postgres}"
      - "POSTGRES_HOST=postgres"
      - "OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317"
      - "OTEL_RESOURCE_ATTRIBUTES=service.name=starter"
      - "OTEL_LOGS_EXPORTER=none"
      - "OTEL_EXPORTER_OTLP_INSECURE=true"
      - "OTEL_EXPORTER_OTLP_METRICS_INSECURE=true"
      - "OTEL_EXPORTER_OTLP_PROTOCOL=grpc"
      - "OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4318/v1/metrics"
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"


  postgres:
    command: [ /bin/bash, -c, /tmp/scripts/init.sh ]
    container_name: postgres-data
    depends_on:
      postgres-server:
        condition: service_healthy
    environment:
      - "POSTGRES_USER=${POSTGRES_USER:-postgres}"
      - "PGPASSWORD=${POSTGRES_PASSWORD:-postgres}"
    image: "postgres:${POSTGRES_VERSION:-17.0}"
    volumes:
      - "./scripts/containers/postgres/script/init.sh:/tmp/scripts/init.sh"
      - "${POSTGRES_DATA:-./scripts/containers/postgres/sql}:/tmp/data/sql"


  postgres-server:
    container_name: postgres
    environment:
      - "POSTGRES_USER=${POSTGRES_USER:-postgres}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}"
      - PGDATA=/data/postgres
    healthcheck:
      interval: 10s
      retries: 3
      test: [ CMD-SHELL, pg_isready ]
      timeout: 5s
    image: "postgres:${POSTGRES_VERSION:-17.0}"
    volumes:
      - "./scripts/containers/postgres/csv:/tmp/data/csv"
    ports:
      - "5432:5432"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8080:8080"
    volumes: [ ]
    container_name: keycloak
    command:
      - "start-dev"
      - "--health-enabled=true"

  keycloak-init:
    image: jq
    container_name: keycloak-init
    volumes:
      - ./scripts/containers/keycloak/setup.sh:/tmp/setup.sh
    command:
      - /tmp/setup.sh
    restart: on-failure
    depends_on:
      - keycloak

  kong:
    container_name: kong
    depends_on:
      kong-data:
        condition: service_completed_successfully
      postgres:
        condition: service_completed_successfully
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=postgres
      - KONG_PG_PASSWORD=postgres
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001,0.0.0.0:8444 ssl
      - KONG_PLUGINS=rate-limiting
    healthcheck:
      interval: 10s
      retries: 5
      test: [ CMD-SHELL, kong health ]
      timeout: 10s
    image: "kong:${KONG_VERSION:-3.8.0}"
    ports:
      - 8001:8001
      - 8000:8000
    restart: unless-stopped

  kong-data:
    command:
      - kong
      - migrations
      - bootstrap
    container_name: kong-data
    depends_on:
      postgres:
        condition: service_completed_successfully
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=postgres
      - KONG_PG_PASSWORD=postgres
    image: "kong:${KONG_VERSION:-3.8.0}"


  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./scripts/containers/otel/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-otlp-receiver"

  otel-collector:
    image: otel/opentelemetry-collector:0.119.0
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./scripts/containers/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one


  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    environment:
      - JAVA_OPTS=-Xms1024m -Xmx1024m -XX:+ExitOnOutOfMemoryError
    restart: always
    ports:
      - "9411:9411"